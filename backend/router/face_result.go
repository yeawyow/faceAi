package router

import (
	"database/sql"
	"log"
	"net/http"

	"github.com/gofiber/fiber/v2"
)

type FaceResult struct {
	ImageID   int           `json:"imageId"`
	FaceCount int           `json:"face_count"`
	Faces     []FaceDetails `json:"faces"`
}

type FaceDetails struct {
	BBox      []float64   `json:"bbox"`      // [x1, y1, x2, y2]
	Embedding []float64   `json:"embedding"` // 128D ‡∏´‡∏£‡∏∑‡∏≠ 512D
	Landmark  [][]float64 `json:"landmark"`  // 5 ‡∏´‡∏£‡∏∑‡∏≠ 106 keypoints
}

func SetupFaceResultAPI(router fiber.Router, conn *sql.DB) {
	router.Post("/face-result", func(c *fiber.Ctx) error {
		var result FaceResult

		if err := c.BodyParser(&result); err != nil {
			log.Printf("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á JSON: %v", err)
			return c.Status(http.StatusBadRequest).JSON(fiber.Map{
				"error": "Invalid JSON format",
			})
		}

		log.Printf("üì¨ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö imageId=%d (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤: %d)", result.ImageID, result.FaceCount)

		// ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å result ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
		// ‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏™‡∏î‡∏á embedding/bbox:
		for i, face := range result.Faces {
			log.Printf("üîπ Face #%d: BBox: %v", i+1, face.BBox)
			log.Printf("üîπ Landmark: %v", face.Landmark)
			log.Printf("üîπ Embedding length: %d", len(face.Embedding))
		}

		// ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö
		return c.JSON(fiber.Map{
			"status":  "received",
			"imageId": result.ImageID,
			"faces":   result.FaceCount,
		})
	})
}
