from insightface.app import FaceAnalysis
import aio_pika
import asyncio
import json
import numpy as np
from PIL import Image
import aiohttp

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° InsightFace
app = FaceAnalysis(name="buffalo_l")
app.prepare(ctx_id=0, det_size=(640, 640))

# URL ‡∏Ç‡∏≠‡∏á API ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏õ
API_URL = "http://your-api-service/api/face-result"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

async def send_to_api(data: dict):
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(API_URL, json=data) as response:
                if response.status == 200:
                    print("‚úÖ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏õ API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    print(f"‚ö†Ô∏è API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: {response.status}")
        except Exception as e:
            print(f"‚ùå ‡∏™‡πà‡∏á API ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {str(e)}")

async def on_message(message: aio_pika.IncomingMessage):
    async with message.process():
        try:
            payload = json.loads(message.body.decode())
            image_id = payload["imageId"]
            image_path = payload["path"]

            print(f"üì• ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô: imageId={image_id}, path={image_path}")

            image = Image.open(image_path).convert("RGB")
            image_np = np.array(image)

            faces = app.get(image_np)
            print(f"üß† ‡∏û‡∏ö {len(faces)} ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤")

            results = []
            for face in faces:
                result = {
                    "bbox": face.bbox.tolist(),
                    "embedding": face.embedding.tolist(),
                    "landmark": face.kps.tolist(),
                }
                results.append(result)

            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏á API
            output = {
                "imageId": image_id,
                "face_count": len(faces),
                "faces": results
            }

            # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
            await send_to_api(output)

        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö imageId={payload.get('imageId')}: {str(e)}")

async def main():
    try:
        connection = await aio_pika.connect_robust("amqp://skko:skkospiderman@rabbitmq/")
        channel = await connection.channel()
        queue = await channel.declare_queue("face_job", durable=True)

        await queue.consume(on_message)
        print("‚úÖ AI Service ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß...")
        await asyncio.Future()
    except Exception as e:
        print("‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RabbitMQ ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", str(e))

if __name__ == "__main__":
    asyncio.run(main())
