import os
os.environ['ORT_DISABLE_CPU_AFFINITY'] = '1'  # ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô import insightface ‡∏´‡∏£‡∏∑‡∏≠ onnxruntime

import aio_pika
import asyncio
import json
import mysql.connector
from insightface.app import FaceAnalysis
from PIL import Image
import numpy as np

IMAGE_BASE_PATH = "/app/images"  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà mount ‡πÉ‡∏ô container

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ InsightFace
app = FaceAnalysis(name="buffalo_l")
app.prepare(ctx_id=0, det_size=(2048, 2048))
app.threshold = 0.4

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MySQL
db_config = {
    'host': '192.168.0.121',
    'user': 'mysql_121',
    'password': 'hdcdatarit9esoydld]o8i',
    'database': 'officedd_photo'
}

async def save_to_db(image_id, embeddings, face_count):
    connection = None
    cursor = None
    try:
        connection = mysql.connector.connect(**db_config)
        cursor = connection.cursor()

        flat_embeddings = np.array(embeddings).flatten().tolist()
        embeddings_json = json.dumps(flat_embeddings)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å embeddings
        query = "INSERT INTO face_embeddings (image_id, embeddings) VALUES (%s, %s)"
        cursor.execute(query, (image_id, embeddings_json))

        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ process ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        update_query = "UPDATE images SET process_status_id = %s, faces = %s WHERE images_id = %s"
        cursor.execute(update_query, (3, face_count, image_id))

        connection.commit()
        print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å embeddings ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö image_id={image_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except mysql.connector.Error as err:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {err}")
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection.close()

async def on_message(message: aio_pika.IncomingMessage):
    async with message.process():  # ack message ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ô‡∏µ‡πâ
        try:
            payload = json.loads(message.body.decode())
            image_id = payload.get("image_id")
            image_name = payload.get("image_name")

            if not image_id or not image_name:
                print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô message ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö")
                return

            image_path = os.path.join(IMAGE_BASE_PATH, image_name)
            print(f"üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• image_id={image_id} path={image_path}")

            # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            image = Image.open(image_path).convert("RGB")
            image_np = np.array(image)
            faces = app.get(image_np)
            face_count = len(faces)

            print(f"üß† ‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ {face_count} ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤")

            embeddings = [face.embedding.tolist() for face in faces]

            await save_to_db(image_id, embeddings, face_count)

        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {e}")

async def main():
    try:
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RabbitMQ
        connection = await aio_pika.connect_robust("amqp://skko:skkospiderman@rabbitmq:5672/")
        channel = await connection.channel()

        # ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡∏•‡∏∞ 1 ‡∏á‡∏≤‡∏ô (prefetch=1)
        await channel.set_qos(prefetch_count=1)

        queue = await channel.declare_queue("images_queue", durable=True)
        await queue.consume(on_message)

        print("‚úÖ AI Worker ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß...")

        # ‡∏£‡∏±‡∏ô loop ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏à‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏£‡∏±‡∏ö message ‡∏ï‡∏•‡∏≠‡∏î‡πÑ‡∏õ
        await asyncio.Future()

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RabbitMQ ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

if __name__ == "__main__":
    asyncio.run(main())
